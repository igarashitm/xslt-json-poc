<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is generated by Kaoto DataMapper. Do not edit. -->
<xsl:stylesheet version="3.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xf="http://www.w3.org/2005/xpath-functions">
  <xsl:output method="xml" indent="yes" />

  <xsl:param name="kaotoDataMapperBody" />

  <!-- Step1: Converts JSON inputs to lossless XML -->
  <xsl:variable
          name="bodyAsLosslessXml" select="json-to-xml($kaotoDataMapperBody)" />

  <!-- Step2: Converts lossless XML to the logical document structure -->
  <!--
    This variable "jsonBody" appears in the XPath when a mapping is created.
    Therefore, it should be clear that this is the representation of the JSON body,
    even though technically it's already transformed into XML here.
  -->
  <xsl:variable name="jsonBody">
    <xsl:apply-templates select="$bodyAsLosslessXml/*"/>
  </xsl:variable>
  <xsl:template match="xf:map">
    <xsl:variable name="name" select="if (@key != '') then @key else 'map' " />
    <xsl:element name="{$name}">
      <xsl:apply-templates select="*" />
    </xsl:element>
  </xsl:template>
  <xsl:template match="xf:array">
    <xsl:variable name="name" select="@key" />
    <xsl:choose>
      <xsl:when test="$name != ''">
        <xsl:element name="{$name}">
          <xsl:apply-templates select="*" />
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:element name="array">
          <xsl:apply-templates select="*" />
        </xsl:element>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template match="xf:number">
    <xsl:variable name="name" select="@key" />
    <xsl:element name="{$name}">
      <xsl:value-of select="text()" />
    </xsl:element>
  </xsl:template>
  <xsl:template match="xf:boolean">
    <xsl:variable name="name" select="@key" />
    <xsl:element name="{$name}">
      <xsl:value-of select="text()" />
    </xsl:element>
  </xsl:template>
  <xsl:template match="*">
    <xsl:variable name="name" select="@key" />
    <xsl:element name="{$name}">
      <xsl:value-of select="text()" />
    </xsl:element>
  </xsl:template>

  <!-- Output -->
  <xsl:template match="/">
    <xsl:copy-of select="$jsonBody"/>
  </xsl:template>


</xsl:stylesheet>
