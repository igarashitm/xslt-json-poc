<?xml version="1.0" encoding="UTF-8"?>
<!-- This file is generated by Kaoto DataMapper. Do not edit. -->
<xsl:stylesheet version="3.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xf="http://www.w3.org/2005/xpath-functions">
  <xsl:output method="text" indent="yes" />

  <xsl:param name="kaotoDataMapperBody" />
  <xsl:param name="orderSequence" />
  <xsl:param name="account" />

  <!-- Step1: Converts JSON inputs to lossless XML -->
  <xsl:variable
          name="bodyAsLosslessXml" select="json-to-xml($kaotoDataMapperBody)" />
  <xsl:variable
          name="accountAsLosslessXml" select="json-to-xml($account)" />

  <!-- Step2: Converts lossless XML to the logical document structure -->
  <!--
    These variables, "jsonBody" and 'jsonAccount' appears in the XPath when a mapping is created.
    Therefore, it should be clear that this is the representation of the JSON body,
    even though technically it's already transformed into XML here.
  -->
  <xsl:variable name="jsonBody">
    <xsl:apply-templates select="$bodyAsLosslessXml/*"/>
  </xsl:variable>
  <xsl:variable name="jsonAccount">
    <xsl:apply-templates select="$accountAsLosslessXml/*"/>
  </xsl:variable>
  <xsl:template match="xf:map">
    <xsl:variable name="name" select="if (@key != '') then @key else 'map' " />
    <xsl:element name="{$name}">
      <xsl:apply-templates select="*" />
    </xsl:element>
  </xsl:template>
  <xsl:template match="xf:array">
    <xsl:variable name="name" select="@key" />
    <xsl:choose>
      <xsl:when test="$name != ''">
        <xsl:element name="{$name}">
          <xsl:apply-templates select="*" />
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:element name="array">
          <xsl:apply-templates select="*" />
        </xsl:element>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template match="xf:number">
    <xsl:variable name="name" select="@key" />
    <xsl:element name="{$name}">
      <xsl:value-of select="text()" />
    </xsl:element>
  </xsl:template>
  <xsl:template match="xf:boolean">
    <xsl:variable name="name" select="@key" />
    <xsl:element name="{$name}">
      <xsl:value-of select="text()" />
    </xsl:element>
  </xsl:template>
  <xsl:template match="*">
    <xsl:variable name="name" select="@key" />
    <xsl:element name="{$name}">
      <xsl:value-of select="text()" />
    </xsl:element>
  </xsl:template>

  <!-- Step3: Pre-process data mappings to lossless XML -->
  <!--
    This is assuming that the mapping serializer/deserializer is being introduced
    separately for when target document is JSON, where serializer directly produce lossless
    XML in preparation for xml-to-json() transformation. Note that it uses special elements
    for JSON lossless format such as xf:map and xf:array.
  -->
  <xsl:variable name="mappedLosslessXml">
    <xf:map>
      <xf:string key="OrderId"><xsl:value-of select="upper-case(concat('ORD-', $jsonAccount/map/AccountId, '-', $orderSequence))"/></xf:string>
      <xf:string key="OrderPerson"><xsl:value-of select="$jsonAccount/map/AccountId, ':', $jsonAccount/map/Name"/></xf:string>
      <xf:map key="ShipTo">
        <xf:string key="Name"><xsl:value-of select="$jsonAccount/map/Name"/></xf:string>
        <xf:map key="Address">
          <xf:string key="Street"><xsl:value-of select="$jsonAccount/map/Address/Street"/></xf:string>
          <xf:string key="City"><xsl:value-of select="$jsonAccount/map/Address/City"/></xf:string>
          <xf:string key="State"><xsl:value-of select="$jsonAccount/map/Address/State"/></xf:string>
          <xf:string key="Country"><xsl:value-of select="$jsonAccount/map/Address/Country"/></xf:string>
        </xf:map>
      </xf:map>
      <xf:array key="Item">
        <xsl:for-each select="$jsonBody/array/map">
          <xf:map>
            <xf:string key="Title"><xsl:value-of select="Title"/></xf:string>
            <xf:number key="Quantity"><xsl:value-of select="Quantity"/></xf:number>
            <xf:number key="Price"><xsl:value-of select="Price"/></xf:number>
          </xf:map>
        </xsl:for-each>
      </xf:array>
    </xf:map>
  </xsl:variable>

  <!-- Step4: Converts lossless XML to JSON output -->
  <xsl:template match="/">
    <xsl:value-of select="xml-to-json($mappedLosslessXml)" />
  </xsl:template>

</xsl:stylesheet>
